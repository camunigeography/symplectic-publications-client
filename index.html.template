<?php

# Define the settings
$settings = array (
	'hostname' => 'localhost',
	'username' => 'the_username',
	'password' => 'the_password',
	'website' => 'https://publications.example.com/',
	'apiUrl' => 'http://publications.example.com:8080/publications-api',
	'apiUsername' => false,
	'apiPassword' => false,
	'multisite' => false,
	'getUsersFunction' => 'getUsersUpstream',
	'getGroupsFunction' => 'getGroupsUpstream',
	'getGroupMembers' => 'getGroupMembersUpstream',
	'cronUsername' => 'create_a_string_here',
);

# Run the application with the specified settings
require_once ('vendor/autoload.php');
new symplecticPublicationsClient ($settings);


# Define the users callback function
function getUsersUpstream ()
{
	/*	
		Must return a datastructure like this:
		
		return array (
		    ['spqr1'] => array (
		            ['username'] => 'spqr1',
		            ['forename'] => 'Sam',
		            ['surname'] => 'Right'
		        ),
		    ['xyz123'] => array (
		            ['username'] => 'xyz123',
		            ['forename'] => 'Xavier',
		            ['surname'] => 'Yu'
		        ),
			...
		);
		
		or in multisite mode:
		
		return array (
			// Department of Widgets
			'widgets' => array (
			    ['spqr1'] => array (
			            ['username'] => 'spqr1',
			            ['forename'] => 'Sam',
			            ['surname'] => 'Right'
			        ),
			    ['xyz123'] => array (
			            ['username'] => 'xyz123',
			            ['forename'] => 'Xavier',
			            ['surname'] => 'Yu'
			        ),
				...
			),
			
			// Department of Sprockets
			'sprockets' => array (
			    ['spqr2'] => array (
			            ['username'] => 'spqr2',
			            ['forename'] => 'Sam',
			            ['surname'] => 'Render'
			        ),
			    ['abc456'] => array (
			            ['username'] => 'abc456',
			            ['forename'] => 'Antonia',
			            ['surname'] => 'Coneley'
			        ),
			    ['xyz123'] => array (
			            ['username'] => 'xyz123',
			            ['forename'] => 'Xavier',
			            ['surname'] => 'Yu'
			        ),
				...
			),
			
			...
	*/
}


# Define the groups callback function
function getGroupsUpstream ()
{
	/*	
		Must return a datastructure like this:
		
		return array (
		    ['widgets'] => array (
		            ['id'] => 'widgets',
		            ['name'] => 'Widgets research group',
		            ['url'] => 'http://www.example.com/research/widgets/',
		            ['ordering'] => 1,
		            ['managers'] => array (
						'xyz123',
					)
		        ),
		    ['sprockets'] => array (
		            ['id'] => 'sprockets',
		            ['name'] => 'Sprockets research group',
		            ['url'] => 'http://www.example.com/research/sprockets/',
		            ['ordering'] => 1,
					['managers'] => array (
						'abc987',
						'spqr1',
					)
		        ),
			...
		);
		
		or in multisite mode, nested by organisation as in getUsersUpstream
	*/
}


# Define the members callback function
function getGroupMembersUpstream ($groupUrl)
{
	/*	
		Must return a datastructure like this:
		
		return array (
		    'spqr1',
		    'xyz123',
			...
		);
	*/
}

?>
